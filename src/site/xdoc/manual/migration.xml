<?xml version="1.0"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Migrating from Log4j 1.x</title>
        <author email="rgoers@apache.org">Ralph Goers</author>
    </properties>

    <body>
        <section name="Migrating from Log4j 1.x to 2.x">
          <p>
            This page explains how to migrate applications or libraries currently using the Log4j 1.x API
            to use Log4j v2 as their main logging framework.
          </p>
          <a name="Log4j1.2Bridge"/>
          <subsection name="Option 1: use the Log4j 1.x bridge (log4j-1.2-api)">
            <p>
              You may be able to convert an application to Log4j 2 <em>without any code changes</em>
              by replacing the Log4j 1.x jar file with Log4j 2's <code>log4j-1.2-api.jar</code>.
            </p>
            <p>
              The Log4j 1.x bridge is useful when:
            </p>
            <ul>
              <li>the application itself is (maybe partly) still using the Log4j 1.x API, or if
              </li>
              <li>the application depends on a library which depends on the Log 1.x API, or</li>
              <li>
                the application needs to support logging configurations in the old Log4j 1.x format.
              </li>
            </ul>
            <p>
              To use this option, applications need to use the following three jar files:
              the Log4j 2 API jar (<code>log4j-api.jar</code>),
              the Log4j 2 implementation jar (<code>log4j-core.jar</code>) and
              the Log4j 1.x bridge jar (<code>log4j-1.2-api.jar</code>).
            </p>
            <p>
              For most applications this is sufficient.
              This is a low-effort way to migrate, and may also allow for migration to proceed gradually over time.
            </p>

            <h4>Limitations of the Log4j 1.x bridge</h4>
            <p>
              Applications can migrate by just using the bridge without further code changes,
              if they meet the following requirements:
            </p>
            <ol>
              <li>They must not access methods and classes internal to the Log4j 1.x implementation such
                as <code>Appender</code>s, <code>LoggerRepository</code> or <code>Category</code>'s
                <code>callAppenders</code> method.</li>
              <li>They must not programmatically configure Log4j.</li>
              <li>They must not configure by calling the Log4j 1.x classes <code>DOMConfigurator</code> or
                <code>PropertyConfigurator</code>.</li>
            </ol>

            <h4>When to stop using the Log4j 1.x bridge</h4>
            <p>
              Once you have migrated all of your own application and library code under your control, you may not need the bridge any more.
              Note that when you use a library/framework that can be configured to use several logging frameworks,
              then you typically don't need the log4j-1.2-api bridge either,
              as you may be able to directly configure it to use Log4j v2 instead v1.
              Some libraries/frameworks even auto-detect the presence of certain logging framework implementations on their classpath,
              and automagically switch their internal logging delegation accordingly;
              try simple removing the Log4j v1 dependency instead of replacing it with this bridge,
              and test if logging from all of your dependencies still work.
            </p>
            <p>
              If you own or can contribute open source to the library you depend on, consider replacing its use of the Log4j v1 API with the v2 API.
            </p>
            <p>
              While the Log4j 1.x bridge supports logging configurations that use the Log4j 1.x properties or XML format,
              migrating to the new 2.x format is not difficult.
              The Log4j 2 web site contains extensive documentation on the 2.x configuration format.
              Examples for migrating logging configurations from the v1 format to the v2 format are below.
            </p>
          </subsection>
          <subsection name="Option 2: convert your application to the Log4j 2 API (log4j-api)">
            <p>For the most part, converting from the Log4j 1.x API to Log4j 2 should be fairly simple. Many
              of the log statements will require no modification. However, where necessary the following changes must be
              made.</p>
            <table width="100%">
              <tr>
                <th>Log4j 1.x</th>
                <th>Log4j 2.x</th>
              </tr>
              <tr>
                <td>Package name: <code>org.apache.log4j</code></td>
                <td><code>org.apache.logging.log4j</code></td>
              </tr>
              <tr>
                <td>Calls to <code>org.apache.log4j.Logger.getLogger()</code></td>
                <td><code>org.apache.logging.log4j.LogManager.getLogger()</code></td>
              </tr>
              <tr>
                <td>Calls to <code>org.apache.log4j.Logger.getRootLogger()</code> or
                  <code>org.apache.log4j.LogManager.getRootLogger()</code></td>
                <td> <code>org.apache.logging.log4j.LogManager.getRootLogger()</code></td>
              </tr>
              <tr>
                <td>Calls to <code>org.apache.log4j.Logger.getLogger</code> that accept a <code>LoggerFactory</code></td>
                <td> Remove the <code>org.apache.log4j.spi.LoggerFactory</code> and use one of Log4j 2's other extension
                  mechanisms</td>
              </tr>
              <tr>
                <td>Calls to <code>org.apache.log4j.Logger.getEffectiveLevel()</code></td>
                <td><code>org.apache.logging.log4j.Logger.getLevel()</code></td>
              </tr>
              <tr>
                <td>Calls to <code>org.apache.log4j.LogManager.shutdown()</code></td>
                <td>Not needed in version 2
                  because the Log4j Core now automatically adds a JVM shutdown hook on start up to perform any Core
                  clean ups.
                  <ol>
                    <li>
                      Starting in Log4j 2.1, you can specify a custom
                      <a class="javadoc" href="../log4j-core/apidocs/org/apache/logging/log4j/core/util/ShutdownCallbackRegistry.html">ShutdownCallbackRegistry</a>
                      to override the default JVM shutdown hook strategy.
                    </li>
                    <li>
                      Starting in Log4j 2.6, you can now use <code>org.apache.logging.log4j.LogManager.shutdown()</code>
                      to initiate shutdown manually.
                    </li>
                  </ol>
                </td>
              </tr>
              <tr>
                <td>Calls to <code>org.apache.log4j.Logger.setLevel()</code> or similar methods
                </td>
                <td>Not supported at API level. Equivalent functionality is provided in the Log4j 2 implementation
                  classes, see <code>org.apache.logging.log4j.core.config.Configurator.setLevel()</code>, but may leave
                  the application susceptible to changes in Log4j 2 internals.</td>
              </tr>
              <tr>
                <td>String concatenation like <code>logger.info("hi " + userName)</code></td>
                <td>Parameterized messages like <code>logger.info("hi {}", userName)</code></td>
              </tr>
              <tr>
                <td><a href="http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/MDC.html"><code>org.apache.log4j.MDC</code></a> and
                  <a href="http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/NDC.html"><code>org.apache.log4j.NDC</code></a>
                </td>
                <td><a href="thread-context.html">Thread Context</a></td>
              </tr>
            </table>
          </subsection>
          <subsection name="Migrating logging configurations to the Log4j 2 format">
            <p>
              Although the Log4j 2 configuration syntax is different than that of Log4j 1.x, most, if not all, of
              the same functionality is available.
            </p>
            <h4>Interpolation</h4>
            <p>
              Note that system property interpolation via the <code>${foo}</code> syntax has been extended to allow
              property lookups from many different sources. See the <a href="lookups.html">Lookups</a> documentation
              for more details. For example, using a lookup for the system property named <code>catalina.base</code>,
              in Log4j 1.x, the syntax would be <code>${catalina.base}</code>. In Log4j 2, the syntax would be
              <code>${sys:catalina.base}</code>.
            </p>
            <h4>Layouts</h4>
            <p>
              Log4j 1.x has a XMLLayout which is different from the XmlLayout in Log4j 2. The log4j-1.2-api module
              contains a <code>Log4j1XmlLayout</code> that produces output in the Log4j 1.x format.
            </p>
            <p>
              The Log4j 1.x <code>SimpleLayout</code> can be emulated with PatternLayout "%level - %m%n".
            </p>
            <p>
              The Log4j 1.x <code>TTCCLayout</code> can be emulated with PatternLayout "%r [%t] %p %c %notEmpty{%ndc }- %m%n".
            </p>
            <p>
              Both <code>PatternLayout</code> and <code>EnhancedPatternLayout</code> in Log4j 1.x can be replaced with
              <code>PatternLayout</code> in Log4j 2. The log4j-1.2-api module contains two pattern conversions "%ndc" and "%properties" which
              can be used to emulate "%x" and "%X" in Log4j 1.x PatternLayout ("%x" and %X" in Log4j 2 have a slightly different format).
            </p>
            <p>
              Below are some example configurations for Log4j 1.x and their counterparts in Log4j 2.
            </p>

            <h4>Sample 1 - Migrating a simple Console Appender configuration</h4>
            <p>Log4j 1.x XML configuration</p>
            <pre class="prettyprint linenums"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j='http://jakarta.apache.org/log4j/'>
  <appender name="STDOUT" class="org.apache.log4j.ConsoleAppender">
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="%d %-5p [%t] %C{2} (%F:%L) - %m%n"/>
    </layout>
  </appender>
  <category name="org.apache.log4j.xml">
    <priority value="info" />
  </category>
  <Root>
    <priority value ="debug" />
    <appender-ref ref="STDOUT" />
  </Root>
</log4j:configuration>]]></pre>
            <p>Log4j 2 XML configuration</p>
            <pre class="prettyprint linenums"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Configuration>
  <Appenders>
    <Console name="STDOUT" target="SYSTEM_OUT">
      <PatternLayout pattern="%d %-5p [%t] %C{2} (%F:%L) - %m%n"/>
    </Console>
  </Appenders>
  <Loggers>
    <Logger name="org.apache.log4j.xml" level="info"/>
    <Root level="debug">
      <AppenderRef ref="STDOUT"/>
    </Root>
  </Loggers>
</Configuration>]]></pre>

            <h4>Sample 2 - Migrating a simple File Appender, XMLLayout and SimpleLayout configuration</h4>
            <p>Log4j 1.x XML configuration</p>
            <pre class="prettyprint linenums"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
  <appender name="A1" class="org.apache.log4j.FileAppender">
    <param name="File"   value="A1.log" />
    <param name="Append" value="false" />
    <layout class="org.apache.log4j.xml.XMLLayout" />
  </appender>
  <appender name="STDOUT" class="org.apache.log4j.ConsoleAppender">
    <layout class="org.apache.log4j.SimpleLayout" />
  </appender>
  <category name="org.apache.log4j.xml">
    <priority value="debug" />
    <appender-ref ref="A1" />
  </category>
  <root>
    <priority value ="debug" />
    <appender-ref ref="STDOUT" />
  </Root>
</log4j:configuration>]]></pre>

           <p>Log4j 2 XML configuration</p>
            <pre class="prettyprint linenums"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Configuration>
  <Appenders>
    <File name="A1" fileName="A1.log" append="false">
      <Log4j1XmlLayout />
    </File>
    <Console name="STDOUT" target="SYSTEM_OUT">
      <PatternLayout pattern="%level - %m%n"/>
    </Console>
  </Appenders>
  <Loggers>
    <Logger name="org.apache.log4j.xml" level="debug">
      <AppenderRef ref="A1"/>
    </Logger>
    <Root level="debug">
      <AppenderRef ref="STDOUT"/>
    </Root>
  </Loggers>
</Configuration>]]></pre>

            <h4>Sample 3 - Migrating a SocketAppender configuration</h4>
            <p>Log4j 1.x XML configuration. This example from Log4j 1.x is misleading. The SocketAppender does not
              actually use a Layout. Configuring one will have no effect.</p>
            <pre class="prettyprint linenums"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
  <appender name="A1" class="org.apache.log4j.net.SocketAppender">
    <param name="RemoteHost" value="localhost"/>
    <param name="Port" value="5000"/>
    <param name="LocationInfo" value="true"/>
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="%t %-5p %c{2} - %m%n"/>
    </layout>
  </appender>
  <appender name="STDOUT" class="org.apache.log4j.ConsoleAppender">
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="%d %-5p [%t] %C{2} (%F:%L) - %m%n"/>
    </layout>
  </appender>
  <category name="org.apache.log4j.xml">
    <priority value="debug"/>
    <appender-ref ref="A1"/>
  </category>
  <root>
    <priority value="debug"/>
    <appender-ref ref="STDOUT"/>
  </Root>
</log4j:configuration>]]></pre>

           <p>Log4j 2 XML configuration</p>
            <pre class="prettyprint linenums"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Configuration>
  <Appenders>
    <Socket name="A1" host="localHost" port="5000">
      <PatternLayout pattern="%t %-5p %c{2} - %m%n"/>
    </Socket>
    <Console name="STDOUT" target="SYSTEM_OUT">
      <PatternLayout pattern="%d %-5p [%t] %C{2} (%F:%L) - %m%n"/>
    </Console>
  </Appenders>
  <Loggers>
    <Logger name="org.apache.log4j.xml" level="debug">
      <AppenderRef ref="A1"/>
    </Logger>
    <Root level="debug">
      <AppenderRef ref="STDOUT"/>
    </Root>
  </Loggers>
</Configuration>]]></pre>

            <h4>Sample 4 - Migrating an AsyncAppender and TTCCLayout configuration</h4>
            <p>Log4j 1.x XML configuration using the AsyncAppender.</p>
            <pre class="prettyprint linenums"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" configDebug="true">
  <appender name="ASYNC" class="org.apache.log4j.AsyncAppender">
    <appender-ref ref="TEMP"/>
  </appender>
  <appender name="TEMP" class="org.apache.log4j.FileAppender">
    <param name="File" value="temp"/>
    <layout class="org.apache.log4j.TTCCLayout">
      <param name="ThreadPrinting" value="true"/>
      <param name="CategoryPrefixing" value="true"/>
      <param name="ContextPrinting" value="true"/>
    </layout>
  </appender>
  <root>
    <priority value="debug"/>
    <appender-ref ref="ASYNC"/>
  </Root>
</log4j:configuration>]]></pre>

           <p>Log4j 2 XML configuration. </p>
            <pre class="prettyprint linenums"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="debug">
  <Appenders>
    <File name="TEMP" fileName="temp">
      <PatternLayout pattern="%r [%t] %p %c %notEmpty{%ndc }- %m%n"/>
    </File>
    <Async name="ASYNC">
      <AppenderRef ref="TEMP"/>
    </Async>
  </Appenders>
  <Loggers>
    <Root level="debug">
      <AppenderRef ref="ASYNC"/>
    </Root>
  </Loggers>
</Configuration>]]></pre>


            <h4>Sample 5 - Migrating a configuration using AsyncAppender with Console and File</h4>
            <p>Log4j 1.x XML configuration using the AsyncAppender.</p>
            <pre class="prettyprint linenums"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" configDebug="true">
  <appender name="ASYNC" class="org.apache.log4j.AsyncAppender">
    <appender-ref ref="TEMP"/>
    <appender-ref ref="CONSOLE"/>
  </appender>
  <appender name="CONSOLE" class="org.apache.log4j.ConsoleAppender">
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="%d %-5p [%t] %C{2} (%F:%L) - %m%n"/>
    </layout>
  </appender>
  <appender name="TEMP" class="org.apache.log4j.FileAppender">
    <param name="File" value="temp"/>
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="%d %-5p [%t] %C{2} (%F:%L) - %m%n"/>
    </layout>
  </appender>
  <root>
    <priority value="debug"/>
    <appender-ref ref="ASYNC"/>
  </Root>
</log4j:configuration>]]></pre>

            <p>Log4j 2 XML configuration. Note that the Async Appender should be configured after the appenders it
              references. This will allow it to shutdown properly.</p>
            <pre class="prettyprint linenums"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="debug">
  <Appenders>
    <Console name="CONSOLE" target="SYSTEM_OUT">
      <PatternLayout pattern="%d %-5p [%t] %C{2} (%F:%L) - %m%n"/>
    </Console>
    <File name="TEMP" fileName="temp">
      <PatternLayout pattern="%d %-5p [%t] %C{2} (%F:%L) - %m%n"/>
    </File>
    <Async name="ASYNC">
      <AppenderRef ref="TEMP"/>
      <AppenderRef ref="CONSOLE"/>
    </Async>
  </Appenders>
  <Loggers>
    <Root level="debug">
      <AppenderRef ref="ASYNC"/>
    </Root>
  </Loggers>
</Configuration>]]></pre>
          </subsection>
        </section>
    </body>
</document>
